type Input = doc[ preface[ header[], Paras ], Blocs ]
type Blocs = (div[Blocs] | p[] | note[Paras])*
type Paras = p[]*

type Output = doc[T2, appendix[ header[], Paras ]]
type T2 = (div[T2] | p[])*


expr Body(rest) =
  if Copy in () then rest
  else if Copy in preface[Any],Any | note[Any],Any then !Body(rest)
  else _[/Body(())], (!Body(rest))

expr Prepend =
  if Copy in () then rest
  else _[/Copy],!Prepend

expr Rest(rest) =
  if Copy in () then rest
  else let rest = !Rest(rest) in
  if Copy in preface[Any],Any | note[Any],Any then /Prepend
  else rest

expr Appendix =
  let rest = appendix[/Rest(())] in
  doc[/Body(rest)]

eval (doc[ preface[ header[p3[]] ], p1[], p2[], note[ z[]]  ]; Appendix)

check Appendix: Input -> Output