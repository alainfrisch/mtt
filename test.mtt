/* Flattening */

expr FlattenAux =
  if Copy in Atom then (Copy,accu)
  else let accu = >FlattenAux in <FlattenAux

expr Flatten =
  let accu = 0 in FlattenAux

/* infer Flatten in (1,(2,(3,0))) */

type Seq = (Atom,Seq) | 0

check Flatten : Any -> Seq

/*
expr SetLeftMost = if Copy in Atom then x else (<SetLeftMost, >Copy)

infer (let x = Copy in SetLeftMost) in ((5,Atom),Atom)
*/